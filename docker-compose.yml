version: '3.8'

services:
    app_client:
        build:
            dockerfile: .docker/prod/app_client/Dockerfile
        hostname: client
        networks:
            - client
            - gateway
        restart: unless-stopped

    app_api:
        build:
            dockerfile: .docker/prod/app_api/Dockerfile
            args:
                IMAGE_REGISTRY: ${IMAGE_REGISTRY}
                IMAGE_TAG: ${IMAGE_TAG}
        volumes:
            - ./storage:/var/www/html/storage
        links:
            - postgres
            - redis
        hostname: api
        networks:
            - api
            - gateway
        restart: unless-stopped

    queue:
        build:
            dockerfile: .docker/prod/queue/Dockerfile
            args:
                IMAGE_REGISTRY: ${IMAGE_REGISTRY}
                IMAGE_TAG: ${IMAGE_TAG}
        volumes:
            - ./storage:/var/www/html/storage
        links:
            - postgres
            - redis
        networks:
            - api
        restart: unless-stopped

    schedule:
        build:
            dockerfile: .docker/prod/schedule/Dockerfile
            args:
                IMAGE_REGISTRY: ${IMAGE_REGISTRY}
                IMAGE_TAG: ${IMAGE_TAG}
        volumes:
            - ./storage:/var/www/html/storage
        links:
            - postgres
            - redis
        networks:
            - api
        restart: unless-stopped

    postgres:
        build:
            dockerfile: .docker/prod/postgres/Dockerfile
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - postgres:/var/lib/postgresql/data
        networks:
            - api
        restart: unless-stopped

    redis:
        build:
            dockerfile: .docker/prod/redis/Dockerfile
        volumes:
            - redis:/data
        networks:
            - api
        restart: unless-stopped

volumes:
    postgres:
        driver: local

    redis:
        driver: local

networks:
    api:
        name: api

    client:
        name: client

    gateway:
        name: gateway
        external: true
